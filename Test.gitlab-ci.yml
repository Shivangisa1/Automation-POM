stages:
  - test

playwright-tests:
  stage: test
  image: mcr.microsoft.com/playwright:v1.44.0-jammy
  script:
    - npm ci
    - npx playwright install --with-deps
    - npx playwright test
  artifacts:
    when: always
    reports:
      junit: report.xml
    paths:
      - playwright-report

 

# image → Uses the official Playwright Docker image (so no setup headache).
#npm ci → Installs dependencies from your package-lock.json.
#npx playwright install --with-deps → Ensures all browsers are installed.
#npx playwright test --reporter=html,junit → Runs tests and generates:
#HTML report → inside playwright-report folder
#JUnit XML report → inside playwright-report/results.xml
#Artifacts → GitLab will keep reports after the job finishes (you can download them from the UI).
# This is a GitLab CI configuration file for running Playwright tests.
# It defines a single job `playwright-tests` that runs in the `test` stage
# using the Playwright Docker image

# jobs are individual tasks that run in the pipeline.
# stages define the order of execution in the pipeline.
# The script section contains the commands to run in the job.
# The artifacts section specifies files to keep after the job finishes.
# The image section specifies the Docker image to use for the job.
# The junit report is generated by Playwright and can be used for integration with CI tools.
# The paths section specifies where to find the generated reports.
# The when: always ensures that artifacts are saved even if the job fails.
# The npx command allows you to run Playwright commands without installing it globally.